// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1hub/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Hub_SyncOperations_FullMethodName = "/v1hub.Hub/SyncOperations"
	Hub_GetConfig_FullMethodName      = "/v1hub.Hub/GetConfig"
)

// HubClient is the client API for Hub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubClient interface {
	// SyncOperations is a bidirectional stream of operations.
	// The client pushes id, modno to the server and may optionally push the operation update itself.
	// The server responds with the id, modno of the latest operation data it has or -1 if it has no data.
	// The client pushes operations it detects to be missing or out of date on the server.
	SyncOperations(ctx context.Context, opts ...grpc.CallOption) (Hub_SyncOperationsClient, error)
	// GetConfig returns a stream of config updates related to the instance_id.
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (Hub_GetConfigClient, error)
}

type hubClient struct {
	cc grpc.ClientConnInterface
}

func NewHubClient(cc grpc.ClientConnInterface) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) SyncOperations(ctx context.Context, opts ...grpc.CallOption) (Hub_SyncOperationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hub_ServiceDesc.Streams[0], Hub_SyncOperations_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hubSyncOperationsClient{stream}
	return x, nil
}

type Hub_SyncOperationsClient interface {
	Send(*OpSyncMetadata) error
	Recv() (*OpSyncMetadata, error)
	grpc.ClientStream
}

type hubSyncOperationsClient struct {
	grpc.ClientStream
}

func (x *hubSyncOperationsClient) Send(m *OpSyncMetadata) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hubSyncOperationsClient) Recv() (*OpSyncMetadata, error) {
	m := new(OpSyncMetadata)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hubClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (Hub_GetConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hub_ServiceDesc.Streams[1], Hub_GetConfig_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hubGetConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hub_GetConfigClient interface {
	Recv() (*Config, error)
	grpc.ClientStream
}

type hubGetConfigClient struct {
	grpc.ClientStream
}

func (x *hubGetConfigClient) Recv() (*Config, error) {
	m := new(Config)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HubServer is the server API for Hub service.
// All implementations must embed UnimplementedHubServer
// for forward compatibility
type HubServer interface {
	// SyncOperations is a bidirectional stream of operations.
	// The client pushes id, modno to the server and may optionally push the operation update itself.
	// The server responds with the id, modno of the latest operation data it has or -1 if it has no data.
	// The client pushes operations it detects to be missing or out of date on the server.
	SyncOperations(Hub_SyncOperationsServer) error
	// GetConfig returns a stream of config updates related to the instance_id.
	GetConfig(*GetConfigRequest, Hub_GetConfigServer) error
	mustEmbedUnimplementedHubServer()
}

// UnimplementedHubServer must be embedded to have forward compatible implementations.
type UnimplementedHubServer struct {
}

func (UnimplementedHubServer) SyncOperations(Hub_SyncOperationsServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncOperations not implemented")
}
func (UnimplementedHubServer) GetConfig(*GetConfigRequest, Hub_GetConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedHubServer) mustEmbedUnimplementedHubServer() {}

// UnsafeHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubServer will
// result in compilation errors.
type UnsafeHubServer interface {
	mustEmbedUnimplementedHubServer()
}

func RegisterHubServer(s grpc.ServiceRegistrar, srv HubServer) {
	s.RegisterService(&Hub_ServiceDesc, srv)
}

func _Hub_SyncOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HubServer).SyncOperations(&hubSyncOperationsServer{stream})
}

type Hub_SyncOperationsServer interface {
	Send(*OpSyncMetadata) error
	Recv() (*OpSyncMetadata, error)
	grpc.ServerStream
}

type hubSyncOperationsServer struct {
	grpc.ServerStream
}

func (x *hubSyncOperationsServer) Send(m *OpSyncMetadata) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hubSyncOperationsServer) Recv() (*OpSyncMetadata, error) {
	m := new(OpSyncMetadata)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hub_GetConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HubServer).GetConfig(m, &hubGetConfigServer{stream})
}

type Hub_GetConfigServer interface {
	Send(*Config) error
	grpc.ServerStream
}

type hubGetConfigServer struct {
	grpc.ServerStream
}

func (x *hubGetConfigServer) Send(m *Config) error {
	return x.ServerStream.SendMsg(m)
}

// Hub_ServiceDesc is the grpc.ServiceDesc for Hub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1hub.Hub",
	HandlerType: (*HubServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncOperations",
			Handler:       _Hub_SyncOperations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetConfig",
			Handler:       _Hub_GetConfig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1hub/service.proto",
}
