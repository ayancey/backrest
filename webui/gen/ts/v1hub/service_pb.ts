// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file v1hub/service.proto (package v1hub, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Operation } from "../v1/operations_pb.js";

/**
 * @generated from message v1hub.OpSyncMetadata
 */
export class OpSyncMetadata extends Message<OpSyncMetadata> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: int64 modno = 2;
   */
  modno = protoInt64.zero;

  /**
   * optionally push the operation itself
   *
   * @generated from field: v1.Operation operation = 3;
   */
  operation?: Operation;

  constructor(data?: PartialMessage<OpSyncMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1hub.OpSyncMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "modno", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "operation", kind: "message", T: Operation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpSyncMetadata {
    return new OpSyncMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpSyncMetadata {
    return new OpSyncMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpSyncMetadata {
    return new OpSyncMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: OpSyncMetadata | PlainMessage<OpSyncMetadata> | undefined, b: OpSyncMetadata | PlainMessage<OpSyncMetadata> | undefined): boolean {
    return proto3.util.equals(OpSyncMetadata, a, b);
  }
}

/**
 * @generated from message v1hub.GetConfigRequest
 */
export class GetConfigRequest extends Message<GetConfigRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<GetConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1hub.GetConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigRequest {
    return new GetConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConfigRequest | PlainMessage<GetConfigRequest> | undefined, b: GetConfigRequest | PlainMessage<GetConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetConfigRequest, a, b);
  }
}

