// @generated by protoc-gen-connect-es v1.3.0 with parameter "target=ts"
// @generated from file v1hub/service.proto (package v1hub, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetConfigRequest, OpSyncMetadata, ProtocolVersion } from "./service_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { OpSelector } from "../v1/service_pb.js";
import { Int64Value } from "../types/value_pb.js";
import { Config } from "../v1/config_pb.js";

/**
 * @generated from service v1hub.Hub
 */
export const Hub = {
  typeName: "v1hub.Hub",
  methods: {
    /**
     * CheckVersionCompatible checks if the client's protocol version is compatible with the server's.
     * If the server's major version breaks compaibility with the client's an error is returned.
     *
     * @generated from rpc v1hub.Hub.CheckVersionCompatible
     */
    checkVersionCompatible: {
      name: "CheckVersionCompatible",
      I: ProtocolVersion,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * GetHighestModno returns the highest modno for any operation matching the selector.
     *
     * @generated from rpc v1hub.Hub.GetHighestModno
     */
    getHighestModno: {
      name: "GetHighestModno",
      I: OpSelector,
      O: Int64Value,
      kind: MethodKind.Unary,
    },
    /**
     * SyncOperations is a bidirectional stream of operations. 
     * The client pushes id, modno to the server and may optionally push the operation update itself.
     * The server responds with the id, modno of the latest operation data it has or -1 if it has no data.
     * The client pushes operations it detects to be missing or out of date on the server.
     *
     * @generated from rpc v1hub.Hub.SyncOperations
     */
    syncOperations: {
      name: "SyncOperations",
      I: OpSyncMetadata,
      O: OpSyncMetadata,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * GetConfig returns a stream of config updates related to the instance_id.
     *
     * @generated from rpc v1hub.Hub.GetConfig
     */
    getConfig: {
      name: "GetConfig",
      I: GetConfigRequest,
      O: Config,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

